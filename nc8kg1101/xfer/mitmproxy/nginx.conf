worker_processes auto;
pcre_jit on;

# Expose env vars to nginx/Lua
env ORX_PSK;
env DNS_RESOLVERS;

events { 
    worker_connections 1024;
}

http {
    include      mime.types;
    default_type application/octet-stream;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile on;
    client_max_body_size 10m;
    proxy_read_timeout 60s;
    proxy_connect_timeout 10s;
    proxy_send_timeout 60s;

    lua_shared_dict cfg 1k;

    init_by_lua_block {
        local dict = ngx.shared.cfg
        dict:set("psk", os.getenv("ORX_PSK") or "NOTSETNOTSETNOTSET")
        dict:set("resolvers", os.getenv("DNS_RESOLVERS") or "1.1.1.1 1.0.0.1")
    }

    server {
        listen 8080;
        server_name _;

        # Default: deny
        location / { return 403; }

        # Expect: /proxy/<psk>/<base64url>
        location ~ ^/proxy/([^/]+)/([^/?#]+)$ {
            set $req_psk $1;
            set $b64url  $2;

            # Check PSK
            access_by_lua_block {
                local dict = ngx.shared.cfg
                local psk = dict:get("psk") or ""
                local req_psk = ngx.var.req_psk
                if req_psk ~= psk then
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }

            # Decode base64url â†’ full URL
            set_by_lua_block $decoded_url {
                local b64 = ngx.var.b64url
                b64 = b64:gsub("-", "+"):gsub("_", "/")
                local pad = (4 - (#b64 % 4)) % 4
                b64 = b64 .. string.rep("=", pad)
                local raw = ngx.decode_base64(b64)
                return raw or ""
            }

            # Extract parts
            set_by_lua_block $scheme_part {
                local url = ngx.var.decoded_url
                local scheme = url:match("^(https?)://")
                return scheme or ""
            }
            set_by_lua_block $host_part {
                local url = ngx.var.decoded_url
                local host = url:match("^https?://([^/]+)")
                return host or ""
            }
            set_by_lua_block $path_part {
                local url = ngx.var.decoded_url
                local path = url:match("^https?://[^/]+(/.*)$") or "/"
                return path
            }

            if ($scheme_part = "") { return 403; }
            if ($host_part = "")   { return 403; }

            # DNS resolvers (env or fallback)
            set_by_lua_block $dyn_resolvers {
                local dict = ngx.shared.cfg
                return dict:get("resolvers") or "1.1.1.1 1.0.0.1"
            }
            resolver $dyn_resolvers ipv6=off valid=300s;

            proxy_set_header Host $host_part;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_ssl_server_name on;
            proxy_pass $scheme_part://$host_part$request_uri;
        }
    }
}

include /etc/nginx/conf.d/*.main;