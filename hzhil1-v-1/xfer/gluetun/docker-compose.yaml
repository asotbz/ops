services:
  gluetun:
    image: qmcgaw/gluetun:v3.40.0
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      - VPN_SERVICE_PROVIDER=${GLUETUN_PROVIDER}
      - VPN_TYPE=${GLUETUN_TYPE}
      - WIREGUARD_PRIVATE_KEY=${GLUETUN_WG_PRIVATE_KEY}
      - SERVER_COUNTRIES=${GLUETUN_COUNTRIES}
      - SERVER_CITIES=${GLUETUN_CITIES}
    labels:
      # logs collection
      logging: promtail
      logging_jobname: containerlogs
      stackname: xfer

      # traefik configs for tunneled services
      traefik.enable: true

      ## streammaster
      # Listen on http, but redirect all requests to https
      traefik.http.routers.streammaster-http.rule: Host(`stm.${DOMAIN}`, `streammaster.${ALT_DOMAIN_AM}`)
      traefik.http.routers.streammaster-http.entrypoints: http
      traefik.http.routers.streammaster-http.middlewares: redirect-https

      # Direct all https requests to the service, checking with crowdsec first
      traefik.http.routers.streammaster-https.rule: Host(`stm.${DOMAIN}`, `streammaster.${ALT_DOMAIN_AM}`)
      traefik.http.routers.streammaster-https.entrypoints: https
      traefik.http.routers.streammaster-https.tls: true
      traefik.http.routers.streammaster-https.tls.certresolver: ${CERT_RESOLVER}
      traefik.http.routers.streammaster-https.service: streammaster
      traefik.http.routers.streammaster-https.middlewares: streammaster-chain

      # Middleware to redirect local testing url patterns
      traefik.http.middlewares.streammaster-redirectregex.redirectregex.permanent: true
      traefik.http.middlewares.streammaster-redirectregex.redirectregex.regex: 'https://(.*)/s/(.*)'
      traefik.http.middlewares.streammaster-redirectregex.redirectregex.replacement: 'https://$${1}'

      # Chain all middlewares together
      traefik.http.middlewares.streammaster-chain.chain.middlewares: crowdsec-bouncer, streammaster-redirectregex

      traefik.http.services.streammaster.loadbalancer.server.port: 7095

      ## dispatcharr
      # Listen on http, but redirect all requests to https
      traefik.http.routers.dispatcharr-http.rule: Host(`dsp.${DOMAIN}`)
      traefik.http.routers.dispatcharr-http.entrypoints: http
      traefik.http.routers.dispatcharr-http.middlewares: redirect-https

      # Direct all https requests to the service, checking with crowdsec first
      traefik.http.routers.dispatcharr-https.rule: Host(`dsp.${DOMAIN}`)
      traefik.http.routers.dispatcharr-https.entrypoints: https
      traefik.http.routers.dispatcharr-https.tls: true
      traefik.http.routers.dispatcharr-https.tls.certresolver: ${CERT_RESOLVER}
      traefik.http.routers.dispatcharr-https.service: dispatcharr
      traefik.http.routers.dispatcharr-https.middlewares: crowdsec-bouncer

      traefik.http.services.dispatcharr.loadbalancer.server.port: 9191
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
        tag: "{{.Name}}"
    networks:
      - backend