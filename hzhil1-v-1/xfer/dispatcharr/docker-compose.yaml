services:
  dispatcharr:
    # https://github.com/Dispatcharr/Dispatcharr
    image: ghcr.io/dispatcharr/dispatcharr:0.5.2
    security_opt:
      - no-new-privileges=true
    container_name: dispatcharr
    restart: unless-stopped
    environment:
      - DISPATCHARR_ENV=aio
      - REDIS_HOST=localhost
      - CELERY_BROKER_URL=redis://localhost:6379/0
    labels:
      # logs collection
      logging: promtail
      logging_jobname: containerlogs
      stackname: xfer

      traefik.enable: true

      # Listen on http, but redirect all requests to https
      traefik.http.routers.dispatcharr-http.rule: Host(`dsp.${DOMAIN}`)
      traefik.http.routers.dispatcharr-http.entrypoints: http
      traefik.http.routers.dispatcharr-http.middlewares: redirect-https

      # Direct all https requests to the service, checking with crowdsec first
      traefik.http.routers.dispatcharr-https.rule: Host(`dsp.${DOMAIN}`)
      traefik.http.routers.dispatcharr-https.entrypoints: https
      traefik.http.routers.dispatcharr-https.tls: true
      traefik.http.routers.dispatcharr-https.tls.certresolver: ${CERT_RESOLVER}
      traefik.http.routers.dispatcharr-https.service: dispatcharr
      traefik.http.routers.dispatcharr-https.middlewares: crowdsec-bouncer

      traefik.http.services.dispatcharr.loadbalancer.server.port: 9191

      # network policy
      whalewall.enabled: true
      whalewall.rules: |
        output:
          # DNS
          - proto: udp
            dst_ports:
              - 53
          # HTTP/S
          - proto: tcp
            dst_ports:
              - 80
              - 443
          # reverse proxy
          - network: common_backend
            container: traefik
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: 1
        tag: "{{.Name}}"
    volumes:
      - dispatcharr_data:/data
    networks:
      - backend

volumes:
  dispatcharr_data:
